import { HttpEventType, HttpResponse } from '@angular/common/http';
import { Component, Input } from '@angular/core';
import { GlobalConstants } from './../../global-constants';
import * as i0 from "@angular/core";
import * as i1 from "./file-upload.service";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/toolbar";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/common";
import * as i6 from "@angular/material/input";
export class UploadFileComponent {
    constructor(uploadService) {
        this.uploadService = uploadService;
        this.showVisuelImg = false;
        this.withIcon = false;
        this.selectedFileNames = [];
        this.progressInfos = [];
        this.message = [];
        this.previews = [];
        this.imageUrl = GlobalConstants.imgURL;
    }
    ngOnInit() {
        this.imageInfos = this.uploadService.getFiles();
    }
    selectFiles(event) {
        this.message = [];
        this.progressInfos = [];
        this.selectedFileNames = [];
        this.selectedFiles = event.target.files;
        this.previews = [];
        if (this.selectedFiles && this.selectedFiles[0]) {
            const numberOfFiles = this.selectedFiles.length;
            for (let i = 0; i < numberOfFiles; i++) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    console.log(e.target.result);
                    this.previews.push(e.target.result);
                };
                reader.readAsDataURL(this.selectedFiles[i]);
                this.selectedFileNames.push(this.selectedFiles[i].name);
            }
        }
    }
    upload(idx, file) {
        this.progressInfos[idx] = { value: 0, fileName: file.name };
        if (file) {
            this.uploadService.upload(file).subscribe((event) => {
                if (event.type === HttpEventType.UploadProgress) {
                    this.progressInfos[idx].value = Math.round((100 * event.loaded) / event.total);
                }
                else if (event instanceof HttpResponse) {
                    const msg = 'Uploaded the file successfully: ' + file.name;
                    this.message.push(msg);
                    this.imageInfos = this.uploadService.getFiles();
                }
            }, (err) => {
                this.progressInfos[idx].value = 0;
                const msg = 'Could not upload the file: ' + file.name;
                this.message.push(msg);
            });
        }
    }
    uploadFiles() {
        this.message = [];
        if (this.selectedFiles) {
            for (let i = 0; i < this.selectedFiles.length; i++) {
                this.upload(i, this.selectedFiles[i]);
            }
        }
    }
}
UploadFileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: UploadFileComponent, deps: [{ token: i1.FileUploadService }], target: i0.ɵɵFactoryTarget.Component });
UploadFileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: UploadFileComponent, selector: "igy-upload-file", inputs: { showVisuelImg: "showVisuelImg", withIcon: "withIcon" }, ngImport: i0, template: "<mat-form-field>\r\n  <div class=\"main-upload\" [ngClass]=\"{'main-upload-with-icon': withIcon}\">\r\n    <img src=\"assets/images/icons/close_modal.png\" alt=\"Plus\" *ngIf=\"withIcon\">\r\n    <mat-toolbar class=\"custom-upload\">\r\n      <input matInput [value]=\"selectedFileNames.length ? selectedFileNames : 'Choisir un fichier'\" />\r\n      <button mat-flat-button color=\"primary\" [disabled]=\"!selectedFiles\" (click)=\"uploadFiles()\">\r\n        <img src=\"assets/images/icons/uploadFile.svg\" alt=\"Icons\">\r\n      </button>\r\n    </mat-toolbar>\r\n    <input class=\"initial-upload\" type=\"file\" id=\"fileInput\" name=\"fileInput\" accept=\"image/*\" multiple\r\n           (change)=\"selectFiles($event)\" />\r\n  </div>\r\n</mat-form-field>\r\n<div *ngIf=\"showVisuelImg\" class=\"show-img-preview\">\r\n  <img *ngFor='let preview of previews' [src]=\"preview\" class=\"preview\">\r\n</div>\r\n", styles: ["mat-form-field{width:100%}:host ::ng-deep .main-upload{position:relative}:host ::ng-deep .main-upload .initial-upload{opacity:0;width:100%;height:100%;position:absolute;top:0;z-index:10}:host ::ng-deep .main-upload .custom-upload{background:transparent;flex-direction:row-reverse}:host ::ng-deep .main-upload-with-icon{text-align:center;max-width:200px;margin:auto}:host ::ng-deep .main-upload-with-icon .mat-input-element{text-align:left}:host ::ng-deep .show-img-preview{width:200px;height:200px;overflow:hidden;margin:auto}:host ::ng-deep .show-img-preview>img{width:100%;height:100%;object-fit:contain}:host ::ng-deep .mat-form-field-underline{display:none}:host ::ng-deep .mat-form-field-infix{border-bottom:none;display:flex;justify-content:center}:host ::ng-deep .mat-input-element{font-size:14px;margin-left:10px}:host ::ng-deep .mat-flat-button.mat-primary{background:transparent;padding:0;line-height:0}:host ::ng-deep .mat-toolbar-single-row{height:30px}:host ::ng-deep .mat-form-field-appearance-legacy .mat-form-field-wrapper{padding-bottom:0}\n"], components: [{ type: i2.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i3.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: UploadFileComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igy-upload-file', template: "<mat-form-field>\r\n  <div class=\"main-upload\" [ngClass]=\"{'main-upload-with-icon': withIcon}\">\r\n    <img src=\"assets/images/icons/close_modal.png\" alt=\"Plus\" *ngIf=\"withIcon\">\r\n    <mat-toolbar class=\"custom-upload\">\r\n      <input matInput [value]=\"selectedFileNames.length ? selectedFileNames : 'Choisir un fichier'\" />\r\n      <button mat-flat-button color=\"primary\" [disabled]=\"!selectedFiles\" (click)=\"uploadFiles()\">\r\n        <img src=\"assets/images/icons/uploadFile.svg\" alt=\"Icons\">\r\n      </button>\r\n    </mat-toolbar>\r\n    <input class=\"initial-upload\" type=\"file\" id=\"fileInput\" name=\"fileInput\" accept=\"image/*\" multiple\r\n           (change)=\"selectFiles($event)\" />\r\n  </div>\r\n</mat-form-field>\r\n<div *ngIf=\"showVisuelImg\" class=\"show-img-preview\">\r\n  <img *ngFor='let preview of previews' [src]=\"preview\" class=\"preview\">\r\n</div>\r\n", styles: ["mat-form-field{width:100%}:host ::ng-deep .main-upload{position:relative}:host ::ng-deep .main-upload .initial-upload{opacity:0;width:100%;height:100%;position:absolute;top:0;z-index:10}:host ::ng-deep .main-upload .custom-upload{background:transparent;flex-direction:row-reverse}:host ::ng-deep .main-upload-with-icon{text-align:center;max-width:200px;margin:auto}:host ::ng-deep .main-upload-with-icon .mat-input-element{text-align:left}:host ::ng-deep .show-img-preview{width:200px;height:200px;overflow:hidden;margin:auto}:host ::ng-deep .show-img-preview>img{width:100%;height:100%;object-fit:contain}:host ::ng-deep .mat-form-field-underline{display:none}:host ::ng-deep .mat-form-field-infix{border-bottom:none;display:flex;justify-content:center}:host ::ng-deep .mat-input-element{font-size:14px;margin-left:10px}:host ::ng-deep .mat-flat-button.mat-primary{background:transparent;padding:0;line-height:0}:host ::ng-deep .mat-toolbar-single-row{height:30px}:host ::ng-deep .mat-form-field-appearance-legacy .mat-form-field-wrapper{padding-bottom:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.FileUploadService }]; }, propDecorators: { showVisuelImg: [{
                type: Input
            }], withIcon: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,